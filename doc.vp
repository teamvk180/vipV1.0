/*
*
*





Expression *Parser::expr()
{

    update();
    Expression *t = nullptr;
    if (match(type::RPAR) || match(type::SEMICOLON))
    {
        cout << "expr " << endl;
        holdToken();
        return t;
    }
    else
    {
        BunddleExpr *l = new BunddleExpr();
        l->expr_.push_back(this->parseExpr());
        while (currentToken.token_type == type::COMMA)
        {
            l->expr_.push_back(this->parseExpr());
        }
        return l;
    }
    return t;
}

Expression *Parser::parseExpr()
{
#ifdef DEBUG
    std::cout << currentToken.lexeme << " >> type : " << (int)currentToken.token_type << "\tparseBooleanExpr" << std::endl;
#endif
    Expression *l = this->parseBooleanExpr();
    while (currentToken.token_type == type::AND || currentToken.token_type == type::OR)
    {
        ALExpr *j = new ALExpr();
        j->op = currentToken.token_type;
        update();
        j->lhs = l;
        j->lhs = this->parseBooleanExpr();
    }
    return l;
}

Expression *Parser::parseBooleanExpr()
{
    ALExpr *j = new ALExpr();
    Expression *l = parseAdditiveExpr();
    if (currentToken.token_type == type::LESS_THAN ||
        currentToken.token_type == type::LESS_THAN_EQ ||
        currentToken.token_type == type::GREATER_THAN ||
        currentToken.token_type == type::GREATER_THAN_EQ ||
        currentToken.token_type == type::EQUALS ||
        currentToken.token_type == type::NOT_EQUAL)
    {
        l->t = currentToken;
        j->op = currentToken.token_type;
        update();
        j->lhs = l;
        j->rhs = (parseAdditiveExpr());
    }
    else
    {
        return l;
    }
    return j;
}

//addition expr
Expression *Parser::parseAdditiveExpr()
{
#ifdef DEBUG
    std::cout << currentToken.lexeme << " >> type : " << (int)currentToken.token_type << "\tparseExpr+-" << std::endl;
#endif
    Expression *l = (this->parseTermExpr());
    ALExpr *j = new ALExpr();
    while (currentToken.token_type == type::PLUS || currentToken.token_type == type::MINUS)
    {
        j->op = currentToken.token_type;
        update();
        j->rhs = l;
        j->lhs = (this->parseTermExpr());
    }
    return l;
}
//terminal
Expression *Parser::parseTermExpr()
{
#ifdef DEBUG
    std::cout << currentToken.lexeme << " >> type : " << (int)currentToken.token_type << "\tparseExpr Terminal" << std::endl;
#endif
    Expression *l = (this->parseFactorExpr());
    while (currentToken.token_type == type::STAR || currentToken.token_type == type::SLASH)
    {
        ALExpr *j = new ALExpr();
        j->op = currentToken.token_type;
        j->lhs = l;
        update();
        j->rhs = (this->parseFactorExpr());
    }
    return l;
}
//factor
Expression *Parser::parseFactorExpr()
{
#ifdef DEBUG
    std::cout << currentToken.lexeme << " >> type : " << (int)currentToken.token_type << "\tparseExpr Factor" << std::endl;
#endif
    ALExpr *j = new ALExpr();
    if (currentToken.token_type == type::MINUS)
    {
        update();
        j->op = type::NEGATIVE_NUMBER;
        j->lhs = (this->parsePositiveFactor());
    }
    else
    {
        holdToken();
        j->rhs = (this->parsePositiveFactor());
    }

    return j;
}

//-var
Expression *Parser::parsePositiveFactor()
{
#ifdef DEBUG
    std::cout << currentToken.lexeme << " >> type : " << (int)currentToken.token_type << "\tparseExpr+ve factor" << std::endl;
#endif
    ALExpr *j = new ALExpr();
    if (match(type::NOT))
    {

        j->op = type::NOT;
        update();
        j->lhs = (this->parsePositiveFactor());
    }
    else
    {
        j->lhs = parseNotFactor();
    }
    return j;
}
// static
Expression *Parser::parseNotFactor()
{
#ifdef DEBUG
    std::cout << currentToken.lexeme << " >> type : " << (int)currentToken.token_type << "\tparseExpr static" << std::endl;
#endif
    update();
    BunddleExpr *l = new BunddleExpr();
    if (match(type::LPAR))
    {
        l->expr_.push_back(this->parseExpr());
        eval(type::RPAR, "expected ')'");
    }
    else if (match(type::INT))
    {
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        update();
        l->expr_.push_back(s);
    }
    else if (match(type::CHAR))
    {
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        update();

        l->expr_.push_back(s);
    }
    else if (match(type::STRING))
    {
        cout << "string detected" << endl;
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        clear();
        update();
        cout << "rnext is " << currentToken.lexeme << endl;
        l->expr_.push_back(s);
    }
    else if (match(type::TRUE))
    {
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        update();

        l->expr_.push_back(s);
    }
    else if (match(type::FALSE))
    {
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        update();

        l->expr_.push_back(s);
    }
    else if (match(type::THIS))
    {
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        clear();
        update();
        l->expr_.push_back(s);
    }
    else if (match(type::VOID))
    {
        staticExpr *s = new staticExpr;
        s->mToken = currentToken;
        update();

        l->expr_.push_back(s);
    }
    else if (match(type::IDENTIFIER))
    {
        update();
        if (match(type::L_SQ_BRACE))
        {
        }
        else if (match(type::LPAR) || match(type::DOT))
        {
            holdToken();
            l->expr_.push_back(this->parseCallStatement());
        }
        else
            holdToken();
    }
    cout << "returning ..r " << currentToken.lexeme << endl;
    return l;
}



















*/